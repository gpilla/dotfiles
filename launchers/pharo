#!/usr/bin/env ruby

# Launcher for Pharo images and VMs
# Usage:
#   pharo add image seaside3.0 /home/xxx/images/Seaside.image
#   pharo add vm cog /home/xxx/software/pharo
#   pharo launch [vm|file] [file|image]

module Constants
  ACTION = ARGV[0]
  WHAT_TO_REGISTER = ARGV[1]
  IMAGE_OR_VM_NAME = ARGV[2]
  IMAGE_NAME = ARGV[2]
  VM_NAME = ARGV[2]
  IMAGE_OR_VM_FILE = ARGV[3]
  IMAGE_FILE = ARGV[3]
  VM_FILE = ARGV[3]
  VM_FILE_OR_NAME = ARGV[1][0...-1]
  IMAGE_FILE_OR_NAME = ARGV[2][0...-1]
  CONF_DIR = '~/.pharo'
  CONF_IMAGES_FILE = 'images'
  CONF_VMS_FILE = 'vms'
end

module Actions
  
  include Constants  

  def self.add
    `mkdir -p #{CONF_DIR}`
    send "add_#{WHAT_TO_REGISTER}"
  end

  def self.launch
    `#{check_vm} #{check_image}`
  end

  private

  def self.add_image
    if File.exists? IMAGE_FILE
      `echo "#{IMAGE_NAME}=#{IMAGE_FILE}" >> #{CONF_DIR}/#{CONF_IMAGES_FILE}`
      puts "Adding image named '#{IMAGE_NAME}' in file #{IMAGE_FILE}"
    else
      puts "the image file #{IMAGE_FILE} does not exist"
      exit
    end
  end

  def self.add_vm
    if File.exists? VM_FILE
      `echo "#{VM_NAME}=#{VM_FILE}" >> #{CONF_DIR}/#{CONF_VMS_FILE}`
      puts "Adding VM named '#{VM_NAME}' in file #{VM_FILE}"
    else
      puts "the VM file #{VM_FILE} does not exist"
      exit
    end
  end

  def self.check_vm
    if File.exists? VM_FILE_OR_NAME
      VM_FILE_OR_NAME
    else
      value = `cat #{CONF_DIR}/#{CONF_VMS_FILE} | grep "#{VM_FILE_OR_NAME}" | awk 'BEGIN { FS = "=" } ; { print $2 }'`
      value = value[0...-1]
      if File.exists? value
        value
      else
        puts 'The vm file does not exist'
        exit
      end
    end
  end

  def self.check_image
    if File.exists? IMAGE_FILE_OR_NAME
      IMAGE_FILE_OR_NAME
    else
      value = `cat #{CONF_DIR}/#{CONF_IMAGES_FILE} | grep "#{IMAGE_FILE_OR_NAME}" | awk 'BEGIN { FS = "=" } ; { print $2 }'`
      value = value[0...-1]
      if File.exists? value
        value
      else
        puts 'The image file does not exist'
        exit
      end
    end
  end

end

begin
  Actions.send Constants::ACTION
rescue NoMethodError => e
  puts "Could not find the action. Valid options are add or launch"
end
