<?xml version='1.0' encoding='utf-8'?>
<snippets language="js">
  <snippet>
    <text><![CDATA[.add('${1:selector expression}')$0]]></text>
    <tag>add</tag>
    <description>add</description>
  </snippet>
  <snippet>
    <text><![CDATA[.addClass('${1:class name}')$0]]></text>
    <tag>addClass</tag>
    <description>addClass</description>
  </snippet>
  <snippet>
    <text><![CDATA[.after('${1:Some text <b>and bold!</b>}')$0]]></text>
    <tag>after</tag>
    <description>after</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.ajax({
  url: '${1:mydomain.com/url}',
  type: '${2:POST}',
${3/(.+)/(?1:  dataType\: ':)/}${3:xml/html/script/json}${3/(.+)/(?1:',
:)/}${4/(.+)/(?1:  data\: $.param\( $\(':)/}${4:Element or Expression}${4/(.+)/(?1:'\) \),
:)/}${5/(.+)/(?1:  complete\: function\(\) {:)/}${5:
    //called when complete}${5/(.+)/(?1:  },
:)/}${6/(.+)/(?1:  success\: function\(\) {:)/}${6:
    //called when successful}${6/(.+)/(?1: },
:)/}${7/(.+)/(?1:  error\: function\(\) {:)/}${7:
    //called when there is an error}${7/(.+)/(?1:  }
:)/}});
$0]]></text>
    <tag>$ajax</tag>
    <description>$.ajax</description>
  </snippet>
  <snippet>
    <text><![CDATA[.ajaxError(function(${1:request, settings}) {
  ${2://stuff to do when an AJAX call returns an error};
});
$0]]></text>
    <tag>ajaxError</tag>
    <description>ajaxError</description>
  </snippet>
  <snippet>
    <text><![CDATA[.ajaxSend(function(${1:request, settings}) {
  ${2://stuff to do before an AJAX request is sent};
});
$0]]></text>
    <tag>ajaxSend</tag>
    <description>ajaxSend</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.ajaxSetup({
  url: "${1:mydomain.com/url}",
  type: "${2:POST}",
${3/(.+)/(?1:  dataType\: ":)/}${3:xml/html/script/json}${3/(.+)/(?1:",
:)/}${4/(.+)/(?1:  data\: $.param\( $\(":)/}${4:Element or Expression}${4/(.+)/(?1:"\) \),
:)/}${5/(.+)/(?1:  complete\: function\(\) {:)/}${5:
    //called when complete}${5/(.+)/(?1:  },
:)/}${6/(.+)/(?1:  success\: function\(\) {:)/}${6:
    //called when successful}${6/(.+)/(?1: },
:)/}${7/(.+)/(?1:  error\: function\(\) {:)/}${7:
    //called when there is an error}${7/(.+)/(?1:  },
:)/}});
$0]]></text>
    <tag>$ajaxSetup</tag>
    <description>$.ajaxSetup</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.ajaxStart(function() {
  ${1://stuff to do when an AJAX call is started and no other AJAX calls are in progress};
});
$0]]></text>
    <tag>ajaxStart</tag>
    <description>ajaxStart</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.ajaxStop(function() {
  ${1://stuff to do when all AJAX calls have completed};
});
$0]]></text>
    <tag>ajaxStop</tag>
    <description>ajaxStop</description>
  </snippet>
  <snippet>
    <text><![CDATA[.ajaxSuccess(function() {
	${1:// executes whenever an AJAX request completes successfully}
});$0]]></text>
    <tag>ajaxSuccess</tag>
    <description>ajaxSuccess</description>
  </snippet>
  <snippet>
    <text><![CDATA[.andSelf()$0]]></text>
    <tag>andSelf</tag>
    <description>andSelf</description>
  </snippet>
  <snippet>
    <text><![CDATA[.animate({${1:${2:param1}: ${3:value1}${4:, ${5:param2}: ${6:value2}}}}, ${7:speed})$0]]></text>
    <tag>animate</tag>
    <description>animate</description>
  </snippet>
  <snippet>
    <text><![CDATA[.animate({${2:param1}: ${3:value1}${4:, ${5:param2}: ${6:value2}}}, ${7:speed}, function() {
  ${0:// stuff to do after animation is complete}
})]]></text>
    <tag>animate</tag>
    <description>animate (with callback)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.append('${1:Some text <b>and bold!</b>}')$0]]></text>
    <tag>append</tag>
    <description>append</description>
  </snippet>
  <snippet>
    <text><![CDATA[.appendTo('${1:selector expression}')$0]]></text>
    <tag>appendTo</tag>
    <description>appendTo</description>
  </snippet>
  <snippet>
    <text><![CDATA[assert(${1:expr});]]></text>
    <tag>as</tag>
    <description>assert</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertBlock('${1:message}'}, function() {
  $0
  return true;
});]]></text>
    <tag>asb</tag>
    <description>assert bloc</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertDifference('${1:expr}', function() {
  $0
}${5:, ${4:1}});]]></text>
    <tag>asd</tag>
    <description>assert difference</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertElementsMatch(${1:elements}, ${2:expr});]]></text>
    <tag>asem</tag>
    <description>assertElementMatch</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertElementsMatch(${1:elements}, ${2:expr});]]></text>
    <tag>asem</tag>
    <description>assertElementsMatch</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertEnumEqual(${1:expected}, ${2:actual}${3:, '${4:Enum should be equal}'});]]></text>
    <tag>asee</tag>
    <description>assertEnumEqual</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertEnumNotEqual(${1:expected}, ${2:actual}${3:, '${4:Enum should be not equal}'});]]></text>
    <tag>asene</tag>
    <description>assertEnumNotEqual</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertEqual(${1:expected}, ${2:actual});]]></text>
    <tag>ase</tag>
    <description>assertEqual</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertHidden(${1:element}${3:, '${4:Should be hidden}'});]]></text>
    <tag>ash</tag>
    <description>assertHidden</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertIdentical(${1:expected}, ${2:actual}${3:, '${4:Should be identitical}'});]]></text>
    <tag>asi</tag>
    <description>assertIdentical</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertInstanceOf(${1:expected}, ${2:actual}${3:, '${4:Should be instance}'});]]></text>
    <tag>asio</tag>
    <description>assertInstanceOf</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertMatch(${1:expected}, ${2:actual});]]></text>
    <tag>asm</tag>
    <description>assertMatch</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertNoDifference('${1:expr}', function() {
  $0
});]]></text>
    <tag>asnd</tag>
    <description>assertNoDifference</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertNoMatch(${1:expected}, ${2:actual}${3:, '${4:Should be no match}'});]]></text>
    <tag>asnm</tag>
    <description>assertNoMatch</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertNotEqual(${1:expected}, ${2:actual});]]></text>
    <tag>asne</tag>
    <description>assertNotEqual</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertNotHasClass(${1:element}, '${2:class}');]]></text>
    <tag>asnhc</tag>
    <description>assertNotHasClass</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertNotIdentical(${1:expected}, ${2:actual}${3:, '${4:Should not be identitical}'});]]></text>
    <tag>asni</tag>
    <description>assertNotIdentical</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertNotInstanceOf(${1:expected}, ${2:actual}${3:, '${4:Should not be instance}'});]]></text>
    <tag>asnio</tag>
    <description>assertNotInstanceOf</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertNotNull(${1:expr});]]></text>
    <tag>asnn</tag>
    <description>assertNotNull</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertNotNullOrUndefined(${1:expr});]]></text>
    <tag>asnnou</tag>
    <description>assertNotNullOrUndefined</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertNotUndefined(${1:expr});]]></text>
    <tag>asnu</tag>
    <description>assertNotUndefined</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertNotVisible(${1:element}${2:, '${3:Should not be visible}'});]]></text>
    <tag>asnv</tag>
    <description>assertNotVisible</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertNull(${1:expr});]]></text>
    <tag>asn</tag>
    <description>assertNull</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertNullOrUndefined(${1:expr});]]></text>
    <tag>asnou</tag>
    <description>assertNullOrUndefined</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertRaise('${1:exceptionName}', ${2:method}${3:, '${4:Should raise}'});]]></text>
    <tag>asr</tag>
    <description>assertRaise</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertRaise('${1:exceptionName}', ${2:method}${3:, '${4:Should raise nothing}'});]]></text>
    <tag>asnr</tag>
    <description>assertRaise nothing</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertRespondsTo('${1:method}', ${2:obj}${3:, '${4:Should respond to}'});]]></text>
    <tag>asrt</tag>
    <description>assertRespondsTo</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertUndefined(${1:expr});]]></text>
    <tag>asru</tag>
    <description>assertUndefined</description>
  </snippet>
  <snippet>
    <text><![CDATA[assertVisible(${1:element}${2:, '${3:Should be visible}'});]]></text>
    <tag>asv</tag>
    <description>assertVisible</description>
  </snippet>
  <snippet>
    <text><![CDATA[.attr('${1:attribute}'${2/(.+)/(?1:, :)/}${2/(^[0-9]+$)|.+/(?1::')/}${2:value}${2/(^[0-9]+$)|.+/(?1::')/})$0]]></text>
    <tag>attr</tag>
    <description>attr</description>
  </snippet>
  <snippet>
    <text><![CDATA[.attr({'${1:attribute1}'${2/(.+)/(?1:\: :)/}${2/(^[0-9]+$)|.+/(?1::')/}${2:value1}${2/(^[0-9]+$)|.+/(?1::')/}, '${3:attribute2}'${4/(.+)/(?1:\: :)/}${4/(^[0-9]+$)|.+/(?1::')/}${4:value2}${4/(^[0-9]+$)|.+/(?1::')/}})$0]]></text>
    <tag>attr</tag>
    <description>attr (map)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.before('${1:Some text <b>and bold!</b>}')$0]]></text>
    <tag>before</tag>
    <description>before</description>
  </snippet>
  <snippet>
    <text><![CDATA[benchmark(${1:operation}, ${2:1000}, '${3:Operation}');]]></text>
    <tag>bm</tag>
    <description>benchmark</description>
  </snippet>
  <snippet>
    <text><![CDATA[benchmark(function() {
  $1
}, ${2:1000}, '${1/^([a-zA-Z_.]+).*/$1/}');]]></text>
    <tag>bmf</tag>
    <description>benchmark with function</description>
  </snippet>
  <snippet>
    <text><![CDATA[.bind('${1:event name}', function(${2:event}) {
	${0:// Act on the event}
});]]></text>
    <tag>bind</tag>
    <description>bind</description>
  </snippet>
  <snippet>
    <text><![CDATA[.blur(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>blur</tag>
    <description>blur</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.boxModel]]></text>
    <tag>$boxModel</tag>
    <description>$.boxModel</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.browser.${1:safari/opera/msie/mozilla}]]></text>
    <tag>$browser</tag>
    <description>$.browser</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.browser.version]]></text>
    <tag>$browser</tag>
    <description>$.browser.version</description>
  </snippet>
  <snippet>
    <text><![CDATA[.change(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>change</tag>
    <description>change</description>
  </snippet>
  <snippet>
    <text><![CDATA[:checked]]></text>
    <description>:checked</description>
  </snippet>
  <snippet>
    <text><![CDATA[.children(${1/(.+)/(?1:':)/}${1:selector expression}${1/(.+)/(?1:':)/})$0]]></text>
    <tag>children</tag>
    <description>children</description>
  </snippet>
  <snippet>
    <text><![CDATA[.click(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>click</tag>
    <description>click</description>
  </snippet>
  <snippet>
    <text><![CDATA[.clone()$0]]></text>
    <description>clone</description>
  </snippet>
  <snippet>
    <text><![CDATA[.filter('${1:selector expression}')$0]]></text>
    <tag>filter</tag>
    <description>closest</description>
  </snippet>
  <snippet>
    <text><![CDATA[.contains('${1:text to find}')$0]]></text>
    <tag>contains</tag>
    <description>contains</description>
  </snippet>
  <snippet>
    <text><![CDATA[:contains('${1:test}')$0]]></text>
    <description>:contains('test')</description>
  </snippet>
  <snippet>
    <text><![CDATA[.css('${1:property}'${2/(.+)/(?1:, :)/}${2/(^[0-9]+$)|.+/(?1::')/}${2:value}${2/(^[0-9]+$)|.+/(?1::')/})$0]]></text>
    <tag>css</tag>
    <description>css</description>
  </snippet>
  <snippet>
    <text><![CDATA[.css({${1:attribute1}: '${2:value1}', ${3:attribute2}: '${4:value2}'})$0]]></text>
    <tag>css</tag>
    <description>css (map)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.data('${1:data}'${2/(.+)/(?1:, :)/}${2/(^[0-9]+$)|.+/(?1::')/}${2:value}${2/(^[0-9]+$)|.+/(?1::')/})$0]]></text>
    <tag>data</tag>
    <description>data</description>
  </snippet>
  <snippet>
    <text><![CDATA[.dblclick(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>dblclick</tag>
    <description>dblclick</description>
  </snippet>
  <snippet>
    <text><![CDATA[.die('${1:event name}')$0]]></text>
    <tag>die</tag>
    <description>die</description>
  </snippet>
  <snippet>
    <text><![CDATA[:disabled]]></text>
    <description>:disabled</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$(document).ready(function() {
	${0:// Stuff to do as soon as the DOM is ready;}
});
]]></text>
    <description>document ready</description>
  </snippet>
  <snippet>
    <text><![CDATA[jQuery(document).ready(function(\$) {
	${0:// Stuff to do as soon as the DOM is ready. Use \$() w/o colliding with other libs;}
});
]]></text>
    <description>document ready (safe)</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.each(${1:array/object}, function(${2:index}${3:, ${4:val}}) {
  ${0://iterate through array or object. val is used only for objects}
});]]></text>
    <tag>$each</tag>
    <description>$.each</description>
  </snippet>
  <snippet>
    <text><![CDATA[.each(function(index) {
	${0:this.innerHTML = this + " is the element, " + index + " is the position";}
});]]></text>
    <tag>each</tag>
    <description>each</description>
  </snippet>
  <snippet>
    <text><![CDATA[:empty]]></text>
    <description>:empty</description>
  </snippet>
  <snippet>
    <text><![CDATA[:enabled]]></text>
    <description>:enabled</description>
  </snippet>
  <snippet>
    <text><![CDATA[.end()$0]]></text>
    <tag>end</tag>
    <description>end</description>
  </snippet>
  <snippet>
    <text><![CDATA[:eq(${1:n})$0]]></text>
    <description>:eq(n)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.error(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>error</tag>
    <description>error</description>
  </snippet>
  <snippet>
    <text><![CDATA[:even]]></text>
    <description>:even</description>
  </snippet>
  <snippet>
    <text><![CDATA[Event.simulate(${1:'${2:element}'}, '${3:event}');]]></text>
    <tag>sim</tag>
    <description>Event.simulate</description>
  </snippet>
  <snippet>
    <text><![CDATA[Event.simulateHtml(${1:'${2:element}'}, '${3:blur|change|error|focus|load|reset|select|submit|unload}');]]></text>
    <tag>simh</tag>
    <description>Event.simulateHtml</description>
  </snippet>
  <snippet>
    <text><![CDATA[Event.simulateMouse(${1:'${2:element}'}, '${3:click|dblclick|mousedown|mousemove|mouseout|mouseover|mouseup}');]]></text>
    <tag>simm</tag>
    <description>Event.simulateMouse</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.extend(${1:target object}, ${2:object1});
$0]]></text>
    <tag>$extend</tag>
    <description>$.extend</description>
  </snippet>
  <snippet>
    <text><![CDATA[.fadeIn(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/})$0]]></text>
    <tag>fadeIn</tag>
    <description>fadeIn</description>
  </snippet>
  <snippet>
    <text><![CDATA[.fadeIn(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/}, function() {
	${0://Stuff to do *after* the animation takes place};
});
]]></text>
    <tag>fadeIn</tag>
    <description>fadeIn (with callback)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.fadeOut(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/})$0]]></text>
    <tag>fadeOut</tag>
    <description>fadeOut</description>
  </snippet>
  <snippet>
    <text><![CDATA[.fadeOut(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/}, function() {
	${0://Stuff to do *after* the animation takes place};
});
]]></text>
    <tag>fadeOut</tag>
    <description>fadeOut (with callback)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.fadeTo(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/}, ${2:0.5})$0]]></text>
    <tag>fadeTo</tag>
    <description>fadeTo</description>
  </snippet>
  <snippet>
    <text><![CDATA[.fadeTo(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/}, ${2:0.5}, function() {
	${0://Stuff to do *after* the animation takes place};
});
]]></text>
    <tag>fadeTo</tag>
    <description>fadeTo (with callback)</description>
  </snippet>
  <snippet>
    <text><![CDATA[fail("${1:message}");]]></text>
    <tag>fail</tag>
    <description>fail</description>
  </snippet>
  <snippet>
    <text><![CDATA[.closest('${1:selector expression}')$0]]></text>
    <tag>closest</tag>
    <description>filter</description>
  </snippet>
  <snippet>
    <text><![CDATA[.filter(function() {
  ${1:return ${2:something};}
})]]></text>
    <tag>filter</tag>
    <description>filter (function)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.find('${1:selector expression}')$0]]></text>
    <tag>find</tag>
    <description>find</description>
  </snippet>
  <snippet>
    <text><![CDATA[:first]]></text>
    <description>:first</description>
  </snippet>
  <snippet>
    <text><![CDATA[:first-child]]></text>
    <description>:first-child</description>
  </snippet>
  <snippet>
    <text><![CDATA[:first-of-type]]></text>
    <description>:first-of-type</description>
  </snippet>
  <snippet>
    <text><![CDATA[.focus(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>focus</tag>
    <description>focus</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.get('${1:/test/ajax-test.xml}'${2/(.+)/(?1:, function\(xml\){
 :)/}${2:alert( $("title",xml).text() )//optional stuff to do after get}${2/(.+)/(?1:;
}:)/});
$0]]></text>
    <tag>$get</tag>
    <description>$.get</description>
  </snippet>
  <snippet>
    <text><![CDATA[.get(${1:element index})$0]]></text>
    <tag>get</tag>
    <description>get</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.getJSON('${1:/path/to/file.cgi}'${2/(.+)/(?1:,{
 :)/}${2:param1: "value1", param2: "value2"}${2/(.+)/(?1:}:)/}${3/(.+)/(?1:,
 function\(json\){
    :)/}${3://stuff to do after event occurs};${3/(.+)/(?1:
}:)/});
$0]]></text>
    <tag>$getJSON</tag>
    <description>$.getJSON</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.getScript('${1:somescript.js}'${3/(.+)/(?1:, function\(\){
 :)/}${3://optional stuff to do after getScript}${3/(.+)/(?1:;
}:)/});
$0]]></text>
    <tag>$getScript</tag>
    <description>$.getScript</description>
  </snippet>
  <snippet>
    <text><![CDATA[:gt(${1:n})$0]]></text>
    <description>:gt(n)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.hasClass('${1:className}')$0]]></text>
    <tag>hasClass</tag>
    <description>hasClass</description>
  </snippet>
  <snippet>
    <text><![CDATA[.height(${1:integer})$0]]></text>
    <tag>height</tag>
    <description>height</description>
  </snippet>
  <snippet>
    <text><![CDATA[:hidden
]]></text>
    <description>:hidden</description>
  </snippet>
  <snippet>
    <text><![CDATA[.hide(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/})$0]]></text>
    <tag>hide</tag>
    <description>hide</description>
  </snippet>
  <snippet>
    <text><![CDATA[.hide(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/}, function() {
	${0://Stuff to do *after* the animation takes place};
});
]]></text>
    <tag>hide</tag>
    <description>hide (with callback)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.hover(function() {
	${1:// Stuff to do when the mouse enters the element;}
}, function() {
	${2:// Stuff to do when the mouse leaves the element;}
});$0]]></text>
    <tag>hover</tag>
    <description>hover</description>
  </snippet>
  <snippet>
    <text><![CDATA[.html(${1/(.+)/(?1:':)/}${1:Some text <b>and bold!</b>}${1/(.+)/(?1:':)/})$0]]></text>
    <tag>html</tag>
    <description>html</description>
  </snippet>
  <snippet>
    <text><![CDATA[info("${1:message}");]]></text>
    <tag>info</tag>
    <description>info</description>
  </snippet>
  <snippet>
    <text><![CDATA[.insertAfter('${1:selector expression}')$0]]></text>
    <tag>insertAfter</tag>
    <description>insertAfter</description>
  </snippet>
  <snippet>
    <text><![CDATA[.insertBefore('${1:selector expression}')$0]]></text>
    <tag>insertBefore</tag>
    <description>insertBefore</description>
  </snippet>
  <snippet>
    <text><![CDATA[.is('${1:selector expression}')$0]]></text>
    <tag>is</tag>
    <description>is</description>
  </snippet>
  <snippet>
    <text><![CDATA[:last]]></text>
    <description>:last</description>
  </snippet>
  <snippet>
    <text><![CDATA[:last-child]]></text>
    <description>:last-child</description>
  </snippet>
  <snippet>
    <text><![CDATA[:last-of-type]]></text>
    <description>:last-of-type</description>
  </snippet>
  <snippet>
    <text><![CDATA[.live('${1:event name}', function(${2:event}) {
	${0:// Act on the event}
});]]></text>
    <tag>live</tag>
    <description>live</description>
  </snippet>
  <snippet>
    <text><![CDATA[.load('${1:/path/to/file.htm}'${2/(.+)/(?1:,{
 :)/}${2:param1: "value1", param2: "value2"}${2/(.+)/(?1:}:)/}${3/(.+)/(?1:,
 function\(\){
    :)/}${3:// Stuff to do after the page is loaded}${3/(.+)/(?1:
}:)/});
$0]]></text>
    <tag>load</tag>
    <description>load (AHAH)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.load(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>load</tag>
    <description>load</description>
  </snippet>
  <snippet>
    <text><![CDATA[:lt(${1:n})$0]]></text>
    <description>:lt(n)</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.map(${1:array}, function(${2:item}${3:, ${4:index}}) {
  ${5:return ${6:something};}
});]]></text>
    <tag>$map</tag>
    <description>$.map</description>
  </snippet>
  <snippet>
    <text><![CDATA[.map(function() {
  ${1:return ${2:something};}
})]]></text>
    <tag>map</tag>
    <description>map (function)</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.merge(${1:array1}, ${2:array2});
$0]]></text>
    <tag>$merge</tag>
    <description>$.merge</description>
  </snippet>
  <snippet>
    <text><![CDATA[.mousedown(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>mousedown</tag>
    <description>mousedown</description>
  </snippet>
  <snippet>
    <text><![CDATA[.mousemove(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>mousemove</tag>
    <description>mousemove</description>
  </snippet>
  <snippet>
    <text><![CDATA[.mouseout(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>mouseout</tag>
    <description>mouseout</description>
  </snippet>
  <snippet>
    <text><![CDATA[.mouseover(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>mouseover</tag>
    <description>mouseover</description>
  </snippet>
  <snippet>
    <text><![CDATA[.mouseup(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>mouseup</tag>
    <description>mouseup</description>
  </snippet>
  <snippet>
    <text><![CDATA[.next(${1/(.+)/(?1:':)/}${1:selector expression}${1/(.+)/(?1:':)/})$0]]></text>
    <tag>next</tag>
    <description>next</description>
  </snippet>
  <snippet>
    <text><![CDATA[.not('${1:selector expression}')$0]]></text>
    <tag>not</tag>
    <description>not</description>
  </snippet>
  <snippet>
    <text><![CDATA[:not(${1:s})$0]]></text>
    <description>:not(s)</description>
  </snippet>
  <snippet>
    <text><![CDATA[:nth-child(${1:n})$0]]></text>
    <description>:nth-child(n)</description>
  </snippet>
  <snippet>
    <text><![CDATA[:nth-last-child(${1:n})$0]]></text>
    <description>:nth-last-child(n)</description>
  </snippet>
  <snippet>
    <text><![CDATA[:nth-of-type(${1:n})$0]]></text>
    <description>:nth-of-type(n)</description>
  </snippet>
  <snippet>
    <text><![CDATA[:odd]]></text>
    <description>:odd</description>
  </snippet>
  <snippet>
    <text><![CDATA[.one('${1:event name}', function(${2:event}) {
	${0:// Act on the event once}
});]]></text>
    <tag>one</tag>
    <description>one</description>
  </snippet>
  <snippet>
    <text><![CDATA[:only-child]]></text>
    <description>:only-child</description>
  </snippet>
  <snippet>
    <text><![CDATA[:only-of-type]]></text>
    <description>:only-of-type</description>
  </snippet>
  <snippet>
    <text><![CDATA[:parent
]]></text>
    <description>:parent</description>
  </snippet>
  <snippet>
    <text><![CDATA[.parent(${1/(.+)/(?1:':)/}${1:selector expression}${1/(.+)/(?1:':)/})$0]]></text>
    <tag>parent</tag>
    <description>parent</description>
  </snippet>
  <snippet>
    <text><![CDATA[.parents(${1/(.+)/(?1:':)/}${1:selector expression}${1/(.+)/(?1:':)/})$0]]></text>
    <tag>parents</tag>
    <description>parents</description>
  </snippet>
  <snippet>
    <text><![CDATA[;(function(\$) {
${2:// ${3:What does the $1 plugin do?}}
\$.fn.${1:pluginName} = function(options) {
  var opts = \$.extend({}, \$.fn.$1.defaults, options);

  return this.each(function() {
    var \$this = \$(this);

  ${5:  ${6:// Support for the Metadata Plugin.}
    var o = \$.meta ? \$.extend({\}, opts, \$this.data()) : opts;
  }

  });

  // private function for debugging
  function debug(\$obj) {
    if (window.console && window.console.log) {
      window.console.log(\$obj);
    }
  }
};

// default options
\$.fn.$1.defaults = {
  ${4:defaultOne:true,
  defaultTwo:false,
  defaultThree:'yay!'}
};

})(jQuery);
]]></text>
    <description>plugin</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.post('${1:/path/to/file.cgi}'${2/(.+)/(?1:,{
 :)/}${2:param1: "value1", param2: "value2"}${2/(.+)/(?1:}:)/}${3/(.+)/(?1:,
 function\(\){
    :)/}${3://stuff to do *after* page is loaded};${3/(.+)/(?1:
}:)/});
$0

]]></text>
    <tag>$post</tag>
    <description>$.post</description>
  </snippet>
  <snippet>
    <text><![CDATA[.prepend('${1:Some text <b>and bold!</b>}')$0]]></text>
    <tag>prepend</tag>
    <description>prepend</description>
  </snippet>
  <snippet>
    <text><![CDATA[.prependTo('${1:selector expression}')$0]]></text>
    <tag>prependTo</tag>
    <description>prependTo</description>
  </snippet>
  <snippet>
    <text><![CDATA[.prev(${1/(.+)/(?1:':)/}${1:selector expression}${1/(.+)/(?1:':)/})$0]]></text>
    <tag>prev</tag>
    <description>prev</description>
  </snippet>
  <snippet>
    <text><![CDATA[.removeAttr('${1:attribute name}')$0]]></text>
    <tag>removeAttr</tag>
    <description>removeAttr</description>
  </snippet>
  <snippet>
    <text><![CDATA[.remove()$0]]></text>
    <tag>remove</tag>
    <description>remove</description>
  </snippet>
  <snippet>
    <text><![CDATA[.removeClass('${1:class name}')$0]]></text>
    <tag>removeClass</tag>
    <description>removeClass</description>
  </snippet>
  <snippet>
    <text><![CDATA[.reset(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>reset</tag>
    <description>reset</description>
  </snippet>
  <snippet>
    <text><![CDATA[.resize(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>resize</tag>
    <description>resize</description>
  </snippet>
  <snippet>
    <text><![CDATA[:root]]></text>
    <description>:root</description>
  </snippet>
  <snippet>
    <text><![CDATA[new Test.Unit.Runner({
  setup: function() { with(this) {
  }},

  teardown: function() { with(this) {
  }},

  test$0

}, {testLog: "${2:testlog${1:-div-id}}"});]]></text>
    <tag>runner</tag>
    <description>Runner</description>
  </snippet>
  <snippet>
    <text><![CDATA[.scroll(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>scroll</tag>
    <description>scroll</description>
  </snippet>
  <snippet>
    <text><![CDATA[.select(function() {
	${0:// Act on the event}
});]]></text>
    <tag>select</tag>
    <description>select</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$(${1/(.+)/(?1:':)/}${1:string/element/array/function/jQuery object/string, context}${1/(.+)/(?1:':)/})$0]]></text>
    <description>$ (Select DOM Element)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.serializeArray()$0]]></text>
    <tag>serializeArray</tag>
    <description>serializeArray</description>
  </snippet>
  <snippet>
    <text><![CDATA[.serialize()$0]]></text>
    <tag>serialize</tag>
    <description>serialize</description>
  </snippet>
  <snippet>
    <text><![CDATA[.show(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/})$0]]></text>
    <tag>show</tag>
    <description>show</description>
  </snippet>
  <snippet>
    <text><![CDATA[.show(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/}, function() {
	${0://Stuff to do *after* the animation takes place};
});
]]></text>
    <tag>show</tag>
    <description>show (with callback)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.siblings(${1/(.+)/(?1:':)/}${1:selector expression}${1/(.+)/(?1:':)/})$0]]></text>
    <tag>siblings</tag>
    <description>siblings</description>
  </snippet>
  <snippet>
    <text><![CDATA[.size()$0]]></text>
    <tag>size</tag>
    <description>size</description>
  </snippet>
  <snippet>
    <text><![CDATA[.slice(${1:start}${2/(.+)/(?1:, :)/}${2:end})$0]]></text>
    <tag>slice</tag>
    <description>slice</description>
  </snippet>
  <snippet>
    <text><![CDATA[.slideDown(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/})$0]]></text>
    <tag>slideDown</tag>
    <description>slideDown</description>
  </snippet>
  <snippet>
    <text><![CDATA[.slideDown(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/}, function() {
	${0://Stuff to do *after* the animation takes place};
});
]]></text>
    <tag>slideDown</tag>
    <description>slideDown (with callback)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.slideToggle(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/})$0]]></text>
    <tag>slideToggle</tag>
    <description>slideToggle</description>
  </snippet>
  <snippet>
    <text><![CDATA[.slideUp(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/})$0]]></text>
    <tag>slideUp</tag>
    <description>slideUp</description>
  </snippet>
  <snippet>
    <text><![CDATA[.slideUp(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/}, function() {
	${0://Stuff to do *after* the animation takes place};
});
]]></text>
    <tag>slideUp</tag>
    <description>slideUp (with callback)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.submit(${1:function() {
	${0:// Act on the event}
\}});]]></text>
    <tag>submit</tag>
    <description>submit</description>
  </snippet>
  <snippet>
    <text><![CDATA[.after(function() {
    ${3}
  })
${0}]]></text>
    <tag>sta</tag>
    <description>SugarTest after</description>
  </snippet>
  <snippet>
    <text><![CDATA[.before(function(${1:data}) {
    ${3}
  })
${0}]]></text>
    <tag>stb</tag>
    <description>SugarTest before</description>
  </snippet>
  <snippet>
    <text><![CDATA[ .context("${1:description}")
  .should("${2:do this}", function() {
    this.${3:assertion}
      ${4}
    })
  ${0}
.end()]]></text>
    <tag>stc</tag>
    <description>SugarTest context</description>
  </snippet>
  <snippet>
    <text><![CDATA[
     SugarTest("${1:basename}")
      .context("${2:description}")
        .before(function(${3:data}) {
            ${4:action}
          })
         .should("${5:do this}", function() {
          this.${6:assertion}
          ${7}
          })
        ${0}
      .end()
     .run();
    ]]></text>
    <tag>st</tag>
    <description>SugarTest default structure</description>
  </snippet>
  <snippet>
    <text><![CDATA[.should("${1:do this}", function() {
  this.${2:assertion}
    ${3}
  })
${0}
    ]]></text>
    <tag>sts</tag>
    <description>SugarTest should</description>
  </snippet>
  <snippet>
    <text><![CDATA[.text(${1:'some text'})$0]]></text>
    <tag>text</tag>
    <description>text</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$(this)$0]]></text>
    <description>$(this)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.toggleClass('${1:class name}')$0]]></text>
    <tag>toggleClass</tag>
    <description>toggleClass</description>
  </snippet>
  <snippet>
    <text><![CDATA[.toggle(function() {
	${1:// Stuff to do every *odd* time the element is clicked;}
}, function() {
	${2:// Stuff to do every *even* time the element is clicked;}
});
$0]]></text>
    <tag>toggle</tag>
    <description>toggle (event)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.toggle(${1/(^[0-9]+$)|.+/(?1::')/}${1:slow/400/fast}${1/(^[0-9]+$)|.+/(?1::')/})$0]]></text>
    <tag>toggle</tag>
    <description>toggle (show/hide)</description>
  </snippet>
  <snippet>
    <text><![CDATA[.trigger('${1:event name}')$0]]></text>
    <tag>trigger</tag>
    <description>trigger</description>
  </snippet>
  <snippet>
    <text><![CDATA[.triggerHandler('${1:event name}')$0]]></text>
    <tag>trigger</tag>
    <description>triggerHandler</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.trim(${1:'${2:string}'})$0]]></text>
    <tag>$trim</tag>
    <description>$.trim</description>
  </snippet>
  <snippet>
    <text><![CDATA[.unbind('${1:event name}')$0]]></text>
    <tag>unbind</tag>
    <description>unbind</description>
  </snippet>
  <snippet>
    <text><![CDATA[\$.unique(${1:elementArray});
$0]]></text>
    <tag>$unique</tag>
    <description>$.unique</description>
  </snippet>
  <snippet>
    <text><![CDATA[.val(${1/(.+)/(?1:':)/}${1:text}${1/(.+)/(?1:':)/})$0]]></text>
    <tag>val</tag>
    <description>val</description>
  </snippet>
  <snippet>
    <text><![CDATA[:visible
]]></text>
    <description>:visible</description>
  </snippet>
  <snippet>
    <text><![CDATA[wait("${1:message}");]]></text>
    <tag>wait</tag>
    <description>wait</description>
  </snippet>
  <snippet>
    <text><![CDATA[.width(${1:integer})$0]]></text>
    <tag>width</tag>
    <description>width</description>
  </snippet>
  <snippet>
    <text><![CDATA[.wrapAll('${1:<div class="extra-wrapper"></div>}')$0]]></text>
    <tag>wrap</tag>
    <description>wrapAll</description>
  </snippet>
  <snippet>
    <text><![CDATA[.wrap('${1:<div class="extra-wrapper"></div>}')$0]]></text>
    <tag>wrap</tag>
    <description>wrap</description>
  </snippet>
  <snippet>
    <text><![CDATA[.wrapInner('${1:<div class="extra-wrapper"></div>}')$0]]></text>
    <tag>wrap</tag>
    <description>wrapInner</description>
  </snippet>
</snippets>
